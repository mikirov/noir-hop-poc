pragma solidity ^0.8.17;

import "forge-std/Test.sol";
import "../circuits/contract/hop_poc/plonk_vk.sol";
import {console} from "forge-std/Script.sol";

contract StarterTest is Test {

    OptimismVerifier wrapper;
    UltraVerifier verifier;
    DummyOptimismBlockhashOracle oracle;

    function setUp() public {
        verifier = new UltraVerifier();
        oracle = new DummyOptimismBlockhashOracle();
        wrapper = new OptimismVerifier(verifier, oracle);
    }

    function test_verify() public {
        // we are verifying the total supply of an ERC20 on optimism at given block number
        uint256 blockNumber = 14488173;
        bytes32 blockHash = bytes32(0x1d9b6173c6ec9d16b5d84f6c9d7201f1f8b84de3fa62b27117e04d1c7388d451);
        oracle.setBlockhash(blockNumber, blockHash); // we are going to do that from the REST API in the future

        address account = 0x32307adfFE088e383AFAa721b06436aDaBA47DBE; // OptimismUselessToken ERC20
        bytes32 slot = bytes32(uint256(2)); // totalSupply
        uint256 value = 92000000000000000000000; // 92000 ether


        //TODO: the part below  can be extracted in the wrapper verifier contract, however we would need to supply the method with account_value(nonce, balance, storage hash, code_hash)

        //HACK: this comes from the Verifier.toml of the circuits
        bytes32[70] memory account_value = ["0x00000000000000000000000000000000000000000000000000000000000000f8", "0x0000000000000000000000000000000000000000000000000000000000000044", "0x0000000000000000000000000000000000000000000000000000000000000001", "0x0000000000000000000000000000000000000000000000000000000000000080", "0x00000000000000000000000000000000000000000000000000000000000000a0", "0x00000000000000000000000000000000000000000000000000000000000000ce", "0x00000000000000000000000000000000000000000000000000000000000000e0", "0x00000000000000000000000000000000000000000000000000000000000000fe", "0x00000000000000000000000000000000000000000000000000000000000000e0", "0x0000000000000000000000000000000000000000000000000000000000000011", "0x0000000000000000000000000000000000000000000000000000000000000082", "0x00000000000000000000000000000000000000000000000000000000000000e6", "0x00000000000000000000000000000000000000000000000000000000000000e7", "0x0000000000000000000000000000000000000000000000000000000000000095", "0x000000000000000000000000000000000000000000000000000000000000004d", "0x0000000000000000000000000000000000000000000000000000000000000077", "0x000000000000000000000000000000000000000000000000000000000000002c", "0x0000000000000000000000000000000000000000000000000000000000000085", "0x000000000000000000000000000000000000000000000000000000000000006c", "0x00000000000000000000000000000000000000000000000000000000000000fe", "0x0000000000000000000000000000000000000000000000000000000000000055", "0x00000000000000000000000000000000000000000000000000000000000000fc", "0x0000000000000000000000000000000000000000000000000000000000000026", "0x0000000000000000000000000000000000000000000000000000000000000034", "0x00000000000000000000000000000000000000000000000000000000000000cf", "0x00000000000000000000000000000000000000000000000000000000000000ff", "0x000000000000000000000000000000000000000000000000000000000000007e", "0x0000000000000000000000000000000000000000000000000000000000000002", "0x000000000000000000000000000000000000000000000000000000000000008a", "0x000000000000000000000000000000000000000000000000000000000000005b", "0x0000000000000000000000000000000000000000000000000000000000000077", "0x0000000000000000000000000000000000000000000000000000000000000077", "0x00000000000000000000000000000000000000000000000000000000000000ae", "0x00000000000000000000000000000000000000000000000000000000000000b9", "0x0000000000000000000000000000000000000000000000000000000000000023", "0x00000000000000000000000000000000000000000000000000000000000000f6", "0x00000000000000000000000000000000000000000000000000000000000000a0", "0x00000000000000000000000000000000000000000000000000000000000000a0", "0x0000000000000000000000000000000000000000000000000000000000000027", "0x0000000000000000000000000000000000000000000000000000000000000098", "0x000000000000000000000000000000000000000000000000000000000000006e", "0x0000000000000000000000000000000000000000000000000000000000000017", "0x00000000000000000000000000000000000000000000000000000000000000a1", "0x00000000000000000000000000000000000000000000000000000000000000f5", "0x0000000000000000000000000000000000000000000000000000000000000092", "0x0000000000000000000000000000000000000000000000000000000000000086", "0x00000000000000000000000000000000000000000000000000000000000000d5", "0x00000000000000000000000000000000000000000000000000000000000000bd", "0x00000000000000000000000000000000000000000000000000000000000000db", "0x0000000000000000000000000000000000000000000000000000000000000045", "0x00000000000000000000000000000000000000000000000000000000000000a0", "0x00000000000000000000000000000000000000000000000000000000000000e1", "0x00000000000000000000000000000000000000000000000000000000000000ab", "0x0000000000000000000000000000000000000000000000000000000000000043", "0x000000000000000000000000000000000000000000000000000000000000004d", "0x000000000000000000000000000000000000000000000000000000000000005e", "0x000000000000000000000000000000000000000000000000000000000000008f", "0x000000000000000000000000000000000000000000000000000000000000007c", "0x0000000000000000000000000000000000000000000000000000000000000089", "0x0000000000000000000000000000000000000000000000000000000000000023", "0x00000000000000000000000000000000000000000000000000000000000000d1", "0x0000000000000000000000000000000000000000000000000000000000000035", "0x0000000000000000000000000000000000000000000000000000000000000053", "0x00000000000000000000000000000000000000000000000000000000000000f4", "0x000000000000000000000000000000000000000000000000000000000000005c", "0x0000000000000000000000000000000000000000000000000000000000000033", "0x0000000000000000000000000000000000000000000000000000000000000008", "0x00000000000000000000000000000000000000000000000000000000000000ac", "0x00000000000000000000000000000000000000000000000000000000000000e8", "0x00000000000000000000000000000000000000000000000000000000000000dc"];

        bytes32[] publicInputs = new bytes32[](186);
        // convert address to 20 bytes32 values for prover
        for(uint i = 0; i < 20; i++)
        {
            publicInputs[i] = bytes32(uint8(account >> i));
        }
        // convert account_value(nonce, balance, storage hash, code_hash) to 70 bytes32 values for prover
        for(uint i = 0; i < 70; i++)
        {
            publicInputs[20 + i] = account_value[i];
        }

        //simulate fetching block hash
        bytes32 fetchedBlockHash = oracle.getBlockhash(blockNumber);

        // convert block hash to 32 bytes32 values for prover
        for(uint i = 0; i < 32; i++) {
            publicInputs[90 + i] = bytes32(uint8(fetchedBlockHash >> i));
        }
        // convert slot to 32 bytes32 values for prover
        for(uint i = 0; i < 32; i++) {
            publicInputs[122 + i] = bytes32(uint8(slot >> i));
        }
        // convert value to 32 bytes32 values for prover
        for(uint i = 0; i < 32; i++) {
            publicInputs[154 + i] = bytes32(uint8(value >> i));
        }

        string memory proof = vm.readLine("../../circuits/proofs/hop_poc.proof");
        wrapper.verify(proof, publicInputs);
    }
}
